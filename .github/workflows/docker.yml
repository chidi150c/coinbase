name: Build & Push Images

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  BOT_IMAGE: ghcr.io/${{ github.repository_owner }}/coinbase-bot
  BRIDGE_IMAGE: ghcr.io/${{ github.repository_owner }}/coinbase-bridge

jobs:
  push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Bot image
      - name: Build & push bot image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.BOT_IMAGE }}:latest
            ${{ env.BOT_IMAGE }}:${{ github.sha }}

      # Bridge image (use existing bridge/Dockerfile)
      - name: Build & push bridge image
        uses: docker/build-push-action@v5
        with:
          context: ./bridge
          file: ./bridge/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.BRIDGE_IMAGE }}:latest
            ${{ env.BRIDGE_IMAGE }}:${{ github.sha }}
name: Deploy to Linode

on:
  workflow_run:
    workflows: ["Build & Push Images"]
    types: [completed]
    branches: ["main"]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Prepare SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          install -m 700 -d ~/.ssh
          printf "%s" "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add host to known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Deploy (pull & up)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" <<'EOF'
          set -euo pipefail
          cd /opt/coinbase/monitoring
          docker compose pull
          docker compose up -d
          docker image prune -f
          EOF
