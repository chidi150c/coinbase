name: Deploy to Linode

on:
  workflow_run:
    workflows: ["Build & Push Images"]
    types: [completed]
    branches: ["main"]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    concurrency:
      group: prod-deploy
      cancel-in-progress: false

    steps:
      - name: Prepare SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          install -m 700 -d ~/.ssh
          printf "%s" "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add host to known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          set -euo pipefail
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Deploy (git sync + hard rollout with prune of ALL old images)
        env:
          SSH_HOST:   ${{ secrets.SSH_HOST }}
          SSH_USER:   ${{ secrets.SSH_USER }}
          DEPLOY_DIR: ${{ vars.DEPLOY_DIR }}   # e.g. /home/chidi/coinbase/monitoring
          REPO_URL:   https://github.com/${{ github.repository }}.git
          GIT_SHA:    ${{ github.sha }}
          HUMAN_TAG:  ${{ github.ref_name }}
          GHCR_NS:    ${{ vars.GHCR_NS }}
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" bash -s -- "$DEPLOY_DIR" "$REPO_URL" "$GIT_SHA" "$HUMAN_TAG" "$GHCR_NS" <<'EOF'
          set -euo pipefail

          DEPLOY_DIR="${1:-/home/chidi/coinbase/monitoring}"
          REPO_URL="$2"
          GIT_SHA_IN="$3"
          HUMAN_TAG_IN="$4"
          GHCR_NS_IN="${5:-}"
          REPO_DIR="$(dirname "$DEPLOY_DIR")"

          # --- Sync repo ---
          if [ ! -d "$REPO_DIR/.git" ]; then
            mkdir -p "$REPO_DIR"
            git clone "$REPO_URL" "$REPO_DIR"
          else
            git -C "$REPO_DIR" remote set-url origin "$REPO_URL"
            git -C "$REPO_DIR" fetch --all
            git -C "$REPO_DIR" reset --hard origin/main
          fi

          cd "$DEPLOY_DIR"

          # --- Patch compose refs (idempotent) ---
          if [ -f docker-compose.yml ]; then
            # namespace -> ghcr.io/${GHCR_NS:-chidi150c}
            sed -i 's#ghcr.io/chidi150c/#ghcr.io/${GHCR_NS:-chidi150c}/#g' docker-compose.yml
            # ensure coinbase-bot images use ${IMAGE_SHA} (if you still have :latest)
            sed -i 's#\(ghcr.io/${GHCR_NS:-chidi150c}/coinbase-bot\):latest#\1:${IMAGE_SHA}#g' docker-compose.yml
          fi

          # --- Inject CI identity for compose ---
          cat > .env.ci <<ENVVARS
          GIT_SHA=${GIT_SHA_IN}
          IMAGE_SHA=${GIT_SHA_IN}
          HUMAN_TAG=${HUMAN_TAG_IN}
          GHCR_NS=${GHCR_NS_IN}
          ENVVARS

          # ================= HARD ROLLOUT =================
          # 1) Stop stack
          docker compose --env-file .env.ci down

          # 2) Remove ALL old images for our repos (not just "unused")
          NS="${GHCR_NS_IN:-chidi150c}"
          KEEP="${GIT_SHA_IN}"

          remove_old_repo_keep_sha () {
            # Keep only :$KEEP, delete every other tag (including :main, older SHAs)
            local repo="$1"
            docker image ls --format '{{.Repository}}:{{.Tag}}' "ghcr.io/${NS}/${repo}" \
              | grep -v '<none>' \
              | awk -F: -v keep="${KEEP}" -v repo="ghcr.io/${NS}/${repo}" '
                  $0 == repo":"keep { next } { print $0 }
                ' \
              | xargs -r docker rmi -f || true
          }

          remove_all_repo () {
            # Delete every tag for a repo (used for :latest repos so compose re-pulls)
            local repo="$1"
            docker image ls --format '{{.Repository}}:{{.Tag}}' "ghcr.io/${NS}/${repo}" \
              | grep -v '<none>' \
              | xargs -r docker rmi -f || true
          }

          # SHA-pinned in compose: keep only current SHA
          remove_old_repo_keep_sha "coinbase-bot"
          remove_old_repo_keep_sha "coinbase-bridge-binance"

          # latest in compose: remove all so a fresh pull happens
          remove_all_repo "coinbase-bridge"
          remove_all_repo "coinbase-bridge-hitbtc"

          # 3) Global sweeps for leftovers/dangling
          docker image prune -af || true
          docker builder prune -af || true

          # 4) Pull exact images (SHA & latest)
          docker compose --env-file .env.ci pull --ignore-pull-failures

          # 5) Bring stack up fresh
          docker compose --env-file .env.ci up -d --force-recreate
          EOF
