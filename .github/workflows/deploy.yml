name: Deploy to Linode

on:
  workflow_run:
    workflows: ["Build & Push Images"]
    types: [completed]
    branches: ["main"]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    concurrency:
      group: prod-deploy
      cancel-in-progress: false

    steps:
      - name: Prepare SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          install -m 700 -d ~/.ssh
          printf "%s" "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add host to known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Deploy (git sync + compose rollout)
        env:
          SSH_HOST:   ${{ secrets.SSH_HOST }}
          SSH_USER:   ${{ secrets.SSH_USER }}
          DEPLOY_DIR: ${{ vars.DEPLOY_DIR }}   # e.g. /home/chidi/coinbase/monitoring
          REPO_URL:   https://github.com/${{ github.repository }}.git
          GIT_SHA:    ${{ github.sha }}
          HUMAN_TAG:  ${{ github.ref_name }}
          GHCR_NS:    ${{ vars.GHCR_NS }}
          GHCR_USER:  ${{ github.repository_owner }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" bash -s -- "$DEPLOY_DIR" "$REPO_URL" "$GIT_SHA" "$HUMAN_TAG" "$GHCR_NS" "$GHCR_USER" "$GHCR_TOKEN" <<'EOF'
          set -euo pipefail

          DEPLOY_DIR="${1:-/home/chidi/coinbase/monitoring}"
          REPO_URL="$2"
          GIT_SHA_IN="$3"
          HUMAN_TAG_IN="$4"
          GHCR_NS_IN="${5:-}"
          GHCR_USER_IN="${6:-}"
          GHCR_TOKEN_IN="${7:-}"

          # Ensure git is present (Ubuntu images typically have it)
          command -v git >/dev/null 2>&1 || { echo "git not found on remote"; exit 1; }

          REPO_DIR="$(dirname "$DEPLOY_DIR")"
          mkdir -p "$REPO_DIR"

          # Sync repo to origin/main
          if [ ! -d "$REPO_DIR/.git" ]; then
            git clone "$REPO_URL" "$REPO_DIR"
          else
            git -C "$REPO_DIR" remote set-url origin "$REPO_URL"
            git -C "$REPO_DIR" fetch --all
            git -C "$REPO_DIR" reset --hard origin/main
          fi

          cd "$DEPLOY_DIR"

          # Patch docker-compose image namespace and bot tags (idempotent)
          if [ -f docker-compose.yml ]; then
            # Namespace -> ghcr.io/${GHCR_NS:-chidi150c}
            sed -i 's#ghcr.io/chidi150c/#ghcr.io/${GHCR_NS:-chidi150c}/#g' docker-compose.yml
            # Tag all bot images with ${IMAGE_SHA} instead of :latest
            sed -i 's#\(ghcr.io/${GHCR_NS:-chidi150c}/coinbase-bot\):latest#\1:${IMAGE_SHA}#g' docker-compose.yml
          fi

          # Inject CI/CD identity for compose
          cat > .env.ci <<ENVVARS
          GIT_SHA=${GIT_SHA_IN}
          IMAGE_SHA=${GIT_SHA_IN}
          HUMAN_TAG=${HUMAN_TAG_IN}
          GHCR_NS=${GHCR_NS_IN}
          ENVVARS

          # Make sure docker is reachable
          docker info >/dev/null

          # Log in to GHCR on the remote (so pulls aren’t anonymous)
          if [ -n "${GHCR_USER_IN}" ] && [ -n "${GHCR_TOKEN_IN}" ]; then
            echo "${GHCR_TOKEN_IN}" | docker login ghcr.io -u "${GHCR_USER_IN}" --password-stdin
          fi

          # Stop/remove any dead services before recreate (safe prune: no volumes)
          docker system prune -f || true
          docker image prune -a -f || true

          # Pull latest tags for everything defined in compose (no arrays)
          docker compose --env-file .env.ci pull --ignore-pull-failures

          # Force recreate all services with fresh images (no arrays)
          docker compose --env-file .env.ci up -d --pull=always --force-recreate

          # Optional sanity: show what’s running and which images are in use
          docker compose ps
          docker image ls --digests "ghcr.io/${GHCR_NS_IN:-chidi150c}/coinbase-bot" \
                                   "ghcr.io/${GHCR_NS_IN:-chidi150c}/coinbase-bridge" \
                                   "ghcr.io/${GHCR_NS_IN:-chidi150c}/coinbase-bridge-binance" \
                                   "ghcr.io/${GHCR_NS_IN:-chidi150c}/coinbase-bridge-hitbtc" || true
          EOF
